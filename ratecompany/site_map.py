from functools import wraps

from django.template.response import TemplateResponse
from django.urls import reverse
from django.conf import settings
from django.contrib.sitemaps import Sitemap

from company.models import Company
from review.models import CompanyReview, Interview


time_string_format = '%Y-%m-%dT%H:%M:%S'


class SiteSection:
    domain = 'jobguy.work'


class SiteIndex:
    domain = 'api.jobguy.work'


class CompanySitemap(Sitemap):
    changefreq = "daily"
    priority = 1.0

    @property
    def lastmodall(self):
        return Company.objects.filter(is_deleted=False, approved=True).order_by('-created')[0].\
            created.strftime(time_string_format)

    def items(self):
        return Company.objects.filter(is_deleted=False, approved=True).order_by('-created')

    def lastmod(self, obj):
        return obj.created

    def get_urls(self, site=None, **kwargs):
        site = SiteSection()
        return super(CompanySitemap, self).get_urls(site=site, **kwargs)

    def _urls(self, page, protocol, domain):
        urls = []
        latest_lastmod = None
        all_items_lastmod = True  # track if all items have a lastmod
        for item in self.paginator.page(page).object_list:
            loc = "%s://%s%s" % (protocol, domain, self.__get('location', item))
            priority = self.__get('priority', item)
            lastmod = self.__get('lastmod', item)
            if all_items_lastmod:
                all_items_lastmod = lastmod is not None
                if (all_items_lastmod and
                        (latest_lastmod is None or lastmod > latest_lastmod)):
                    latest_lastmod = lastmod
            if '.' + item.get_media.split('.')[-1] in settings.KNOWN_EXTENSION.values():
                media = list()
                media.append(settings.MEDIA_BASE_PATH + item.get_media)
            else:
                media = None
            url_info = {
                'item': item,
                'location': loc,
                'lastmod': lastmod.strftime(time_string_format) + '+03:30',
                'changefreq': self.__get('changefreq', item),
                'priority': str(priority if priority is not None else ''),
                'image': media,
            }
            urls.append(url_info)
        if all_items_lastmod and latest_lastmod:
            self.latest_lastmod = latest_lastmod
        return urls

    def __get(self, name, obj, default=None):
        try:
            attr = getattr(self, name)
        except AttributeError:
            return default
        if callable(attr):
            return attr(obj)
        return attr


def x_robots_tag(func):
    @wraps(func)
    def inner(request, *args, **kwargs):
        response = func(request, *args, **kwargs)
        response['X-Robots-Tag'] = 'noindex, noodp, noarchive'
        return response
    return inner


@x_robots_tag
def index(request, sitemaps,
          template_name='utilities/sitemap_index.xml', content_type='application/xml',
          sitemap_url_name='django.contrib.sitemaps.views.sitemap'):
    req_protocol = request.scheme
    req_site = SiteIndex()
    sites = []  # all sections' sitemap URLs
    for section, site in sitemaps.items():
        # For each section label, add links of all pages of its sitemap
        # (usually generated by the `sitemap` view).
        if callable(site):
            site = site()
        protocol = req_protocol if site.protocol is None else site.protocol
        sitemap_url = reverse(sitemap_url_name, kwargs={'section': section})
        absolute_url = '%s://%s%s' % (protocol, req_site.domain, sitemap_url)
        sites.append({'location': absolute_url, 'lastmod': site.lastmodall + '+03:30'})
        # Add links to all pages of the sitemap.
        for page in range(2, site.paginator.num_pages + 1):
            sites.append('%s?p=%s' % (absolute_url, page))
    return TemplateResponse(request, template_name, {'sitemaps': sites},
                            content_type=content_type)


class ReviewSitemap(Sitemap):
    changefreq = "weekly"
    priority = 1.0

    @property
    def lastmodall(self):
        return CompanyReview.objects.filter(is_deleted=False, approved=True).order_by('-created')[0].\
            created.strftime(time_string_format)

    def items(self):
        return CompanyReview.objects.filter(is_deleted=False, approved=True).order_by('-created')

    def lastmod(self, obj):
        return obj.created

    def get_urls(self, site=None, **kwargs):
        site = SiteSection()
        return super(ReviewSitemap, self).get_urls(site=site, **kwargs)

    def _urls(self, page, protocol, domain):
        urls = []
        latest_lastmod = None
        all_items_lastmod = True  # track if all items have a lastmod
        for item in self.paginator.page(page).object_list:
            loc = "%s://%s%s" % (protocol, domain, self.__get('location', item))
            priority = self.__get('priority', item)
            lastmod = self.__get('lastmod', item)
            if all_items_lastmod:
                all_items_lastmod = lastmod is not None
                if (all_items_lastmod and
                        (latest_lastmod is None or lastmod > latest_lastmod)):
                    latest_lastmod = lastmod

            media = None
            url_info = {
                'item': item,
                'location': loc,
                'lastmod': lastmod.strftime(time_string_format) + '+03:30',
                'changefreq': self.__get('changefreq', item),
                'priority': str(priority if priority is not None else ''),
                'image': media,
            }
            urls.append(url_info)
        if all_items_lastmod and latest_lastmod:
            self.latest_lastmod = latest_lastmod
        return urls

    def __get(self, name, obj, default=None):
        try:
            attr = getattr(self, name)
        except AttributeError:
            return default
        if callable(attr):
            return attr(obj)
        return attr


class InterviewSitemap(Sitemap):
    changefreq = "weekly"
    priority = 1.0

    @property
    def lastmodall(self):
        return Interview.objects.filter(is_deleted=False, approved=True).order_by('-created')[0].created.strftime(time_string_format)

    def items(self):
        return Interview.objects.filter(is_deleted=False, approved=True).order_by('-created')

    def lastmod(self, obj):
        return obj.created

    def get_urls(self, site=None, **kwargs):
        site = SiteSection()
        return super(InterviewSitemap, self).get_urls(site=site, **kwargs)

    def _urls(self, page, protocol, domain):
        urls = []
        latest_lastmod = None
        all_items_lastmod = True  # track if all items have a lastmod
        for item in self.paginator.page(page).object_list:
            loc = "%s://%s%s" % (protocol, domain, self.__get('location', item))
            priority = self.__get('priority', item)
            lastmod = self.__get('lastmod', item)
            if all_items_lastmod:
                all_items_lastmod = lastmod is not None
                if (all_items_lastmod and
                        (latest_lastmod is None or lastmod > latest_lastmod)):
                    latest_lastmod = lastmod

            media = None
            url_info = {
                'item': item,
                'location': loc,
                'lastmod': lastmod.strftime(time_string_format) + '+03:30',
                'changefreq': self.__get('changefreq', item),
                'priority': str(priority if priority is not None else ''),
                'image': media,
            }
            urls.append(url_info)
        if all_items_lastmod and latest_lastmod:
            self.latest_lastmod = latest_lastmod
        return urls

    def __get(self, name, obj, default=None):
        try:
            attr = getattr(self, name)
        except AttributeError:
            return default
        if callable(attr):
            return attr(obj)
        return attr
